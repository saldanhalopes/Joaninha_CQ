/*
 * Copyright (C) 2017 rafael.lopes
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package Frm.Preparo;

import Classes.DAO.AtividadePreparoDAO;
import Classes.DAO.CromatografoDAO;
import Classes.DAO.MetodologiaDAO;
import Classes.Acesso.AtividadePreparoAcesso;
import Classes.Modelo.Analise;
import Classes.Modelo.AtividadePreparo;
import Classes.Modelo.Cromatografo;
import Classes.Modelo.Metodologia;
import Classes.Modelo.Usuario;
import Classes.Util.ComboBox;
import Classes.Util.DataHora;
import Frm.Cadastro.FrmProcurarMetodologia;
import Frm.Login.FrmSalvar;
import Frm.Login.FrmUsuarioSalvar;
import java.awt.Cursor;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author rafael.lopes
 */
public class FrmSolucaoPreparo extends javax.swing.JDialog {

    private TreeMap<Integer, String> categoryMapMetodo = new TreeMap<>();
    private TreeMap<Integer, String> categoryMapEquipamento = new TreeMap<>();
    private int analise_id;
    private boolean editar;
    private boolean editar_pedido;

    /**
     * Creates new form FrmNovoRegistroCromatografo
     *
     * @param parent
     * @param modal
     */
    public FrmSolucaoPreparo(java.awt.Frame parent, boolean modal, int id, boolean pedido) {
        super(parent, modal);
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        setTitle("Preparo Solução Reagente");
        txtQuantidade.setModel(new SpinnerNumberModel(0, 0, 100, 0.05));
        readEquipamento();
        readMetodo();
        loadHora();
        analise_id = id;
        editar_pedido = pedido;
        AtividadePreparoAcesso Acesso = new AtividadePreparoAcesso();
        if (Acesso.verificarCarregarDadosPreparo()) {
            editar = true;
        }
        if (pedido) {
            carregarPedido(id);
        } else {
            carregarDados(id);
        }
    }

    public FrmSolucaoPreparo(java.awt.Frame parent, boolean modal, int id) {
        super(parent, modal);
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        setTitle("Preparo Solução Reagente");
        txtQuantidade.setModel(new SpinnerNumberModel(0, 0, 100, 0.05));
        analise_id = id;
        readEquipamento();
        loadHora();
        readMetodo();
        carregarDados(id);
    }

    public FrmSolucaoPreparo(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        setTitle("Preparo Solução Reagente");
        txtQuantidade.setModel(new SpinnerNumberModel(0, 0, 100, 0.05));
        loadHora();
        loadData();
        readMetodo();
        readEquipamento();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDados = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        txtDescricao = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        cmbMetodo = new javax.swing.JComboBox();
        btnProcurarMetodo = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtLote = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtQuantidade = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        ckbRetrabalho = new javax.swing.JCheckBox();
        jLabel25 = new javax.swing.JLabel();
        cmbEquipamento = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObs = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        txtHoraInicio = new javax.swing.JSpinner();
        txtMinutoInicio = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDataInicio = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        txtUsuarioInicio = new javax.swing.JTextField();
        btnUsuarioInicio = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        txtHoraFim = new javax.swing.JSpinner();
        txtMinutoFim = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDataFim = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        txtUsuarioFim = new javax.swing.JTextField();
        btnUsuarioFim = new javax.swing.JButton();
        ckbFinalizar = new javax.swing.JCheckBox();
        btnSalvar = new javax.swing.JButton();
        btnFechar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        pnlDados.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Solução Reagente"));

        jLabel10.setText("Descrição:");

        txtDescricao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel24.setText("Método:");

        btnProcurarMetodo.setText("Buscar");
        btnProcurarMetodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcurarMetodoActionPerformed(evt);
            }
        });

        jLabel8.setText("Lote:");

        jLabel7.setText("Qtd:");

        jLabel9.setText("Litros");

        jLabel11.setText("Observação:");

        ckbRetrabalho.setText("Retrabalho");

        jLabel25.setText("Equipamento:");

        txtObs.setColumns(20);
        txtObs.setRows(5);
        jScrollPane1.setViewportView(txtObs);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDescricao, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(txtLote)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(cmbMetodo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnProcurarMetodo, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbEquipamento, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(ckbRetrabalho, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(txtLote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(cmbMetodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcurarMetodo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ckbRetrabalho)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Data / Hora do Início"));

        jLabel1.setText("h");

        jLabel2.setText("min");

        jLabel5.setText("Responsável:");

        txtUsuarioInicio.setEditable(false);
        txtUsuarioInicio.setBackground(new java.awt.Color(204, 204, 204));

        btnUsuarioInicio.setText("Usuário");
        btnUsuarioInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUsuarioInicioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtDataInicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMinutoInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUsuarioInicio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUsuarioInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtMinutoInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addComponent(txtDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUsuarioInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUsuarioInicio))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Data / Hora do Final"));

        jLabel3.setText("h");

        jLabel4.setText("min");

        jLabel6.setText("Responsável:");

        txtUsuarioFim.setEditable(false);
        txtUsuarioFim.setBackground(new java.awt.Color(204, 204, 204));

        btnUsuarioFim.setText("Usuário");
        btnUsuarioFim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUsuarioFimActionPerformed(evt);
            }
        });

        ckbFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbFinalizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(ckbFinalizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtDataFim, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHoraFim, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUsuarioFim)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtMinutoFim, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addComponent(btnUsuarioFim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMinutoFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addComponent(txtHoraFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtDataFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckbFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUsuarioFim)
                    .addComponent(txtUsuarioFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnFechar.setText("Fechar");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDadosLayout = new javax.swing.GroupLayout(pnlDados);
        pnlDados.setLayout(pnlDadosLayout);
        pnlDadosLayout.setHorizontalGroup(
            pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDadosLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlDadosLayout.setVerticalGroup(
            pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFechar)
                    .addComponent(btnSalvar))
                .addContainerGap())
        );

        getContentPane().add(pnlDados);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        dispose();
    }//GEN-LAST:event_btnFecharActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        Timestamp datahora_inicio = DataHora.getTimestampDateTime(DataHora.getStringDate(txtDataInicio.getDate())
                + " " + txtHoraInicio.getValue().toString()
                + ":" + txtMinutoInicio.getValue().toString() + ":00");
        Timestamp datahora_fim = DataHora.getTimestampDateTime(DataHora.getStringDate(txtDataFim.getDate())
                + " " + txtHoraFim.getValue().toString()
                + ":" + txtMinutoFim.getValue().toString() + ":00");
        if (analise_id > 0) {
            //ja existe
            if (editar_pedido) {
                //pedido
                if (editar) {
                    //editar pedido
                    try {
                        if (txtDescricao.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Descreva a Solução!");
                            txtDescricao.requestFocus();
                        } else if ((Double) txtQuantidade.getValue() == 0) {
                            JOptionPane.showMessageDialog(null, "Selecione a quantidade Preparada!");
                            txtQuantidade.requestFocus();
                        } else if (cmbMetodo.getSelectedItem().toString().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Selecione a Metodologia!");
                            cmbMetodo.requestFocus();
                        } else {
                            //Abre Dialog para savar
                            FrmSalvar frmSalvar = new FrmSalvar(null, true);
                            frmSalvar.setVisible(true);
                            if (FrmSalvar.senha()) {
                                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                                updatePedido();
                                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                                dispose();
                            }
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Não foi possivel salvar. Algum Campo está inválido!");
                    }
                } else {
                    //nao editar pedido
                    try {
                        if (txtDataInicio.getDate() == null) {
                            JOptionPane.showMessageDialog(null, "Data do Início está Inválida!");
                            txtDataInicio.requestFocus();
                        } else if (txtDataFim.getDate() == null && ckbFinalizar.isSelected()) {
                            JOptionPane.showMessageDialog(null, "Data do Fim está Inválida!");
                            txtDataFim.requestFocus();
                        } else if (datahora_inicio.after(datahora_fim == null ? new Date() : datahora_fim)) {
                            JOptionPane.showMessageDialog(null, "Data e Hora do Início e Fim estão Inválidas!");
                            txtDataFim.requestFocus();
                        } else if (txtUsuarioInicio.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Usuário inválido!");
                            txtUsuarioInicio.requestFocus();
                        } else if (txtUsuarioFim.getText().isEmpty() && ckbFinalizar.isSelected()) {
                            JOptionPane.showMessageDialog(null, "Usuário inválido!");
                            txtUsuarioFim.requestFocus();
                        } else {
                            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                            updatePedido();
                            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                            dispose();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Não foi possivel salvar. Algum Campo está inválido!");
                    }
                }
            } else {
                //nao pedido
                if (editar) {
                    //editar nao pedido
                    try {
                        if (cmbMetodo.getSelectedItem().toString().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Selecione a Metodologia!");
                            cmbMetodo.requestFocus();
                        } else if (txtDataInicio.getDate() == null) {
                            JOptionPane.showMessageDialog(null, "Data do Início está Inválida!");
                            txtDataInicio.requestFocus();
                        } else if (txtDataFim.getDate() == null) {
                            JOptionPane.showMessageDialog(null, "Data do Fim está Inválida!");
                            txtDataFim.requestFocus();
                        } else if (datahora_inicio.after(datahora_fim == null ? new Date() : datahora_fim)) {
                            JOptionPane.showMessageDialog(null, "Data e Hora do Início e Fim estão Inválidas!");
                            txtDataFim.requestFocus();
                        } else if (txtUsuarioInicio.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Usuário inválido!");
                            txtUsuarioInicio.requestFocus();
                        } else if (txtUsuarioFim.getText().isEmpty() && ckbFinalizar.isSelected()) {
                            JOptionPane.showMessageDialog(null, "Usuário inválido!");
                            txtUsuarioFim.requestFocus();
                        } else {
                            //Abre Dialog para savar
                            FrmSalvar frmSalvar = new FrmSalvar(null, true);
                            frmSalvar.setVisible(true);
                            if (FrmSalvar.senha()) {
                                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                                updateDados();
                                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                                dispose();
                            }
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Não foi possivel salvar. Algum Campo está inválido!");
                    }
                } else {
                    //nao editar nao pedido
                    try {
                        if (txtDataInicio.getDate() == null) {
                            JOptionPane.showMessageDialog(null, "Data do Início está Inválida!");
                            txtDataInicio.requestFocus();
                        } else if (txtDataFim.getDate() == null) {
                            JOptionPane.showMessageDialog(null, "Data do Fim está Inválida!");
                            txtDataFim.requestFocus();
                        } else if (datahora_inicio.after(datahora_fim == null ? new Date() : datahora_fim)) {
                            JOptionPane.showMessageDialog(null, "Data e Hora do Início e Fim estão Inválidas!");
                            txtDataFim.requestFocus();
                        } else if (txtUsuarioFim.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Usuário inválido!");
                            txtUsuarioFim.requestFocus();
                        } else {
                            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                            updateDados();
                            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                            dispose();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Não foi possivel salvar. Algum Campo está inválido!");
                    }
                }
            }
        } else {
            //novo
            try {
                if (txtDescricao.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Descreva a Solução!");
                    txtDescricao.requestFocus();
                } else if ((Double) txtQuantidade.getValue() == 0) {
                    JOptionPane.showMessageDialog(null, "Selecione a quantidade Preparada!");
                    txtQuantidade.requestFocus();
                } else if (cmbMetodo.getSelectedItem().toString().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Selecione a Metodologia!");
                    cmbMetodo.requestFocus();
                } else if (txtDataInicio.getDate() == null) {
                    JOptionPane.showMessageDialog(null, "Data do Início está Inválida!");
                    txtDataInicio.requestFocus();
                } else if (txtDataFim.getDate() == null && ckbFinalizar.isSelected()) {
                    JOptionPane.showMessageDialog(null, "Data do Fim está Inválida!");
                    txtDataFim.requestFocus();
                } else if (datahora_inicio.after(datahora_fim == null ? new Date() : datahora_fim)) {
                    JOptionPane.showMessageDialog(null, "Data e Hora do Início e Fim estão Inválidas!");
                    txtDataFim.requestFocus();
                } else if (txtUsuarioInicio.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Usuário inválido!");
                    txtUsuarioInicio.requestFocus();
                } else if (txtUsuarioFim.getText().isEmpty() && ckbFinalizar.isSelected()) {
                    JOptionPane.showMessageDialog(null, "Usuário inválido!");
                    txtUsuarioFim.requestFocus();
                } else {
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    criarAtividade();
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    dispose();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Não foi possivel salvar. Algum Campo está inválido!");
            }
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnProcurarMetodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcurarMetodoActionPerformed
        Metodologia mtd = new Metodologia();
        FrmProcurarMetodologia frm = new FrmProcurarMetodologia(null, true, mtd);
        frm.setVisible(true);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        readMetodo();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        String[] cod_mtd = {mtd.getCod_metodo()};
        cmbMetodo.setSelectedItem(cod_mtd[0]);
    }//GEN-LAST:event_btnProcurarMetodoActionPerformed

    private void btnUsuarioInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUsuarioInicioActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        Usuario user = new Usuario();
        FrmUsuarioSalvar frm = new FrmUsuarioSalvar(null, true, user);
        frm.setVisible(true);
        if (FrmUsuarioSalvar.senha()) {
            txtUsuarioInicio.setText(user.getUser());
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnUsuarioInicioActionPerformed

    private void btnUsuarioFimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUsuarioFimActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        Usuario user = new Usuario();
        FrmUsuarioSalvar frm = new FrmUsuarioSalvar(null, true, user);
        frm.setVisible(true);
        if (FrmUsuarioSalvar.senha()) {
            txtUsuarioFim.setText(user.getUser());
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnUsuarioFimActionPerformed

    private void ckbFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbFinalizarActionPerformed
        if (ckbFinalizar.isSelected()) {
            txtDataFim.setEnabled(true);
            txtHoraFim.setEnabled(true);
            txtMinutoFim.setEnabled(true);
            txtUsuarioFim.setEnabled(true);
            btnUsuarioFim.setEnabled(true);
        } else {
            txtDataFim.setEnabled(false);
            txtHoraFim.setEnabled(false);
            txtMinutoFim.setEnabled(false);
            txtUsuarioFim.setEnabled(false);
            btnUsuarioFim.setEnabled(false);
        }
    }//GEN-LAST:event_ckbFinalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmSolucaoPreparo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmSolucaoPreparo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmSolucaoPreparo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmSolucaoPreparo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmSolucaoPreparo dialog = new FrmSolucaoPreparo(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnFechar;
    private javax.swing.JButton btnProcurarMetodo;
    public static javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnUsuarioFim;
    private javax.swing.JButton btnUsuarioInicio;
    private javax.swing.JCheckBox ckbFinalizar;
    private javax.swing.JCheckBox ckbRetrabalho;
    private javax.swing.JComboBox cmbEquipamento;
    private javax.swing.JComboBox cmbMetodo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlDados;
    private com.toedter.calendar.JDateChooser txtDataFim;
    private com.toedter.calendar.JDateChooser txtDataInicio;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JSpinner txtHoraFim;
    private javax.swing.JSpinner txtHoraInicio;
    private javax.swing.JTextField txtLote;
    private javax.swing.JSpinner txtMinutoFim;
    private javax.swing.JSpinner txtMinutoInicio;
    private javax.swing.JTextArea txtObs;
    private javax.swing.JSpinner txtQuantidade;
    public static javax.swing.JTextField txtUsuarioFim;
    public static javax.swing.JTextField txtUsuarioInicio;
    // End of variables declaration//GEN-END:variables

    private void loadHora() {
        SpinnerNumberModel modelHoraInicio = new SpinnerNumberModel(0, 0, 23, 1);
        txtHoraInicio.setModel(modelHoraInicio);
        JSpinner.NumberEditor editorHoraInicio = new JSpinner.NumberEditor(txtHoraInicio);
        txtHoraInicio.setEditor(editorHoraInicio);
        SpinnerNumberModel modelMinutoInicio = new SpinnerNumberModel(0, 0, 59, 1);
        txtMinutoInicio.setModel(modelMinutoInicio);
        JSpinner.NumberEditor editorMinutoInicio = new JSpinner.NumberEditor(txtMinutoInicio);
        txtMinutoInicio.setEditor(editorMinutoInicio);
        SpinnerNumberModel modelHoraFim = new SpinnerNumberModel(0, 0, 23, 1);
        txtHoraFim.setModel(modelHoraFim);
        JSpinner.NumberEditor editorHoraFim = new JSpinner.NumberEditor(txtHoraFim);
        txtHoraFim.setEditor(editorHoraFim);
        SpinnerNumberModel modelMinutoFim = new SpinnerNumberModel(0, 0, 59, 1);
        txtMinutoFim.setModel(modelMinutoFim);
        JSpinner.NumberEditor editorMinutoFim = new JSpinner.NumberEditor(txtMinutoFim);
        txtMinutoFim.setEditor(editorMinutoFim);
    }

    private void loadData() {
        Date currentDate = new Date();
        Calendar cal = Calendar.getInstance();
        cal.setTime(currentDate);
        txtDataInicio.setDate(currentDate);
        txtDataInicio.setMaxSelectableDate(currentDate);
        txtHoraInicio.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
        txtMinutoInicio.setValue((Integer) cal.get(Calendar.MINUTE));
        txtDataFim.setDate(currentDate);
        txtDataFim.setMaxSelectableDate(currentDate);
        txtHoraFim.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
        txtMinutoFim.setValue((Integer) cal.get(Calendar.MINUTE) + 5);
        cal.add(Calendar.DATE, -5);
        txtDataFim.setMinSelectableDate(cal.getTime());
        txtDataInicio.setMinSelectableDate(cal.getTime());
        txtDataFim.setEnabled(false);
        txtHoraFim.setEnabled(false);
        txtMinutoFim.setEnabled(false);
    }

    public final void readMetodo() {
        cmbMetodo.removeAllItems();
        cmbMetodo.addItem("");
        cmbMetodo.addItem("MULTIPROPÓSITO");
        categoryMapMetodo.clear();
        MetodologiaDAO mtdDao = new MetodologiaDAO();
        for (Metodologia mtd : mtdDao.readMetodologia()) {
            Integer id = mtd.getMetodo_id();
            String name = mtd.getCod_metodo();
            cmbMetodo.addItem(name);
            categoryMapMetodo.put(id, name);
        }
    }

    public final void readEquipamento() {
        cmbEquipamento.removeAllItems();
        cmbEquipamento.addItem("");
        categoryMapEquipamento.clear();
        CromatografoDAO equipDao = new CromatografoDAO();
        for (Cromatografo equip : equipDao.readCromatografo()) {
            Integer id = (Integer) equip.getCromatografo_id();
            String name = equip.getSystem_name();
            cmbEquipamento.addItem(name);
            categoryMapEquipamento.put(id, name);
        }
    }

    private void updateDados() {
        try {
            AtividadePreparo atvprep = new AtividadePreparo();
            AtividadePreparoDAO atvprepDAO = new AtividadePreparoDAO();
            Usuario user_regeistro = new Usuario();
            Usuario user_inicio = new Usuario();
            Usuario user_fim = new Usuario();
            Cromatografo equip = new Cromatografo();
            Metodologia mtd = new Metodologia();
            atvprep.setAtividade_preparo_id(analise_id);
            if (cmbEquipamento.getSelectedItem() != null) {
                equip.setCromatografo_id(ComboBox.getKeyForValue(cmbEquipamento.getSelectedItem().toString(), categoryMapEquipamento));
            } else {
                equip.setCromatografo_id(0);
            }
            atvprep.setCromatografo(equip);
            atvprep.setRetrabalho_preparo(ckbRetrabalho.isSelected());
            atvprep.setLote_preparo(txtLote.getText());
            atvprep.setObs_preparo(txtObs.getText());
            atvprep.setTipo_preparo(null);
            atvprep.setDescricao_preparo(txtDescricao.getText().trim().toUpperCase());
            atvprep.setQtd_preparo((Double) txtQuantidade.getValue());
            if (!cmbMetodo.getSelectedItem().toString().isEmpty()) {
                mtd.setMetodo_id(ComboBox.getKeyForValue(cmbMetodo.getSelectedItem().toString(), categoryMapMetodo));
            } else {
                mtd.setMetodo_id(0);
            }
            atvprep.setMetodologia(mtd);
            Timestamp datahora_inicio = DataHora.getTimestampDateTime(DataHora.getStringDate(txtDataInicio.getDate())
                    + " " + txtHoraInicio.getValue().toString()
                    + ":" + txtMinutoInicio.getValue().toString() + ":00");
            Timestamp datahora_fim = DataHora.getTimestampDateTime(DataHora.getStringDate(txtDataFim.getDate())
                    + " " + txtHoraFim.getValue().toString()
                    + ":" + txtMinutoFim.getValue().toString() + ":00");
            atvprep.setData_hora_inicio(datahora_inicio);
            user_inicio.setUser(txtUsuarioInicio.getText());
            atvprep.setUser_inicio(user_inicio);

            if (!ckbFinalizar.isSelected() && ckbFinalizar.isVisible()) {
                atvprep.setData_hora_fim(null);
                atvprep.setUser_fim(new Usuario());
            } else {
                atvprep.setData_hora_fim(datahora_fim);
                user_fim.setUser(txtUsuarioFim.getText());
                atvprep.setUser_fim(user_fim);
            }
            atvprep.setData_hora_registro(DataHora.getTimestampDate(new Date()));
            user_regeistro.setUser(System.getProperty("user"));
            atvprep.setUser_registro(user_regeistro);
            atvprepDAO.updateAtividade(atvprep);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar dados: " + e);
        }
    }

    private void criarAtividade() {
        try {
            AtividadePreparo atvprep = new AtividadePreparo();
            AtividadePreparoDAO atvprepDAO = new AtividadePreparoDAO();
            Usuario user_regeistro = new Usuario();
            Usuario user_inicio = new Usuario();
            Usuario user_fim = new Usuario();
            Metodologia mtd = new Metodologia();
            Cromatografo equip = new Cromatografo();
            Analise anls = new Analise();
            atvprep.setCategoria_preparo("Soluções Reagentes");
            atvprep.setTipo_preparo(null);
            atvprep.setDescricao_preparo(txtDescricao.getText().trim().toUpperCase());
            atvprep.setLote_preparo(txtLote.getText().trim().toUpperCase());
            atvprep.setQtd_preparo((Double) txtQuantidade.getValue());
            mtd.setMetodo_id(ComboBox.getKeyForValue(cmbMetodo.getSelectedItem().toString(), categoryMapMetodo));
            atvprep.setMetodologia(mtd);
            if (cmbEquipamento.getSelectedItem() != null) {
                equip.setCromatografo_id(ComboBox.getKeyForValue(cmbEquipamento.getSelectedItem().toString(), categoryMapEquipamento));
            } else {
                equip.setCromatografo_id(0);
            }
            atvprep.setCromatografo(equip);
            atvprep.setRetrabalho_preparo(ckbRetrabalho.isSelected());
            anls.setAnalise_id(0);
            atvprep.setAnalise(anls);
            atvprep.setObs_preparo(txtObs.getText());
            Timestamp datahora_inicio = DataHora.getTimestampDateTime(DataHora.getStringDate(txtDataInicio.getDate())
                    + " " + txtHoraInicio.getValue().toString()
                    + ":" + txtMinutoInicio.getValue().toString() + ":00");
            Timestamp datahora_fim = DataHora.getTimestampDateTime(DataHora.getStringDate(txtDataFim.getDate())
                    + " " + txtHoraFim.getValue().toString()
                    + ":" + txtMinutoFim.getValue().toString() + ":00");
            atvprep.setData_hora_inicio(datahora_inicio);
            user_inicio.setUser(txtUsuarioInicio.getText());
            atvprep.setUser_inicio(user_inicio);
            if (ckbFinalizar.isSelected()) {
                atvprep.setData_hora_fim(datahora_fim);
                user_fim.setUser(txtUsuarioFim.getText());
                atvprep.setUser_fim(user_fim);
            } else {
                atvprep.setData_hora_fim(null);
                atvprep.setUser_fim(new Usuario());
            }
            atvprep.setData_hora_registro(DataHora.getTimestampDate(new Date()));
            user_regeistro.setUser(System.getProperty("user"));
            atvprep.setUser_registro(user_regeistro);
            atvprepDAO.createAtividade(atvprep);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar dados: " + e);
        }
    }

    private void carregarDados(int id) {
        AtividadePreparo atvprep = new AtividadePreparo();
        AtividadePreparoDAO atvprepDAO = new AtividadePreparoDAO();
        atvprep.setAtividade_preparo_id(id);
        atvprepDAO.selectAtividade(atvprep);
        txtLote.setText(atvprep.getLote_preparo());
        String[] cod_mtd = {atvprep.getMetodologia().getCod_metodo()};
        cmbMetodo.setSelectedItem(cod_mtd[0]);
        String[] cod_equip = {atvprep.getCromatografo().getSystem_name()};
        cmbEquipamento.setSelectedItem(cod_equip[0]);
        ckbRetrabalho.setSelected((Boolean) atvprep.getRetrabalho_preparo());
        txtDescricao.setText(atvprep.getDescricao_preparo());
        txtQuantidade.setValue(atvprep.getQtd_preparo());
        txtObs.setText(atvprep.getObs_preparo());
        txtUsuarioInicio.setText(atvprep.getUser_inicio().getUser());
        txtUsuarioFim.setText(atvprep.getUser_fim().getUser());
        if (editar) {
            ckbFinalizar.setVisible(true);
            ckbFinalizar.setSelected(true);
            cmbMetodo.setEnabled(true);
            btnProcurarMetodo.setVisible(true);
            ckbRetrabalho.setEnabled(true);
            txtUsuarioInicio.setEnabled(true);
            btnUsuarioInicio.setEnabled(true);
            txtDataFim.setEnabled(true);
            txtHoraFim.setEnabled(true);
            txtMinutoFim.setEnabled(true);
            txtQuantidade.setEnabled(true);
            txtDescricao.setEnabled(true);
            txtUsuarioFim.setEnabled(true);
            btnUsuarioFim.setEnabled(true);
        } else {
            cmbMetodo.setEnabled(false);
            btnProcurarMetodo.setVisible(false);
            txtHoraInicio.setEnabled(false);
            txtMinutoInicio.setEnabled(false);
            txtDataInicio.setEnabled(false);
            ckbFinalizar.setVisible(false);
            ckbRetrabalho.setEnabled(false);
            txtUsuarioInicio.setEnabled(false);
            btnUsuarioInicio.setEnabled(false);
            txtQuantidade.setEnabled(false);
            txtDescricao.setEnabled(false);
        }

        try {
            Date currentDate = new Date();
            Calendar cal = Calendar.getInstance();
            Date data_inicio = DataHora.getTimestampDate(atvprep.getData_hora_inicio());
            cal.setTime(data_inicio);
            txtDataInicio.setDate(data_inicio);
            txtDataInicio.setMinSelectableDate(data_inicio);
            txtHoraInicio.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
            txtMinutoInicio.setValue((Integer) cal.get(Calendar.MINUTE));
            txtDataInicio.setMaxSelectableDate(currentDate);
            if (editar) {
                Date data_fim = DataHora.getTimestampDate(atvprep.getData_hora_fim() == null ? new Date() : atvprep.getData_hora_fim());
                cal.setTime(data_fim);
                txtDataFim.setDate(data_fim);
                txtHoraFim.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
                txtMinutoFim.setValue((Integer) cal.get(Calendar.MINUTE));
                cal.add(Calendar.DATE, -5);
                txtDataFim.setMinSelectableDate(cal.getTime());
                txtDataFim.setMaxSelectableDate(currentDate);
            } else {
                cal.setTime(currentDate);
                txtDataFim.setDate(currentDate);
                txtHoraFim.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
                txtMinutoFim.setValue((Integer) cal.get(Calendar.MINUTE));
                cal.add(Calendar.DATE, -5);
                txtDataFim.setMinSelectableDate(cal.getTime());
                txtDataFim.setMaxSelectableDate(currentDate);
            }
        } catch (Exception e) {
            Calendar cal = Calendar.getInstance();
            cal.setTime(new Date());
            txtDataFim.setDate(new Date());
            txtHoraFim.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
            txtMinutoFim.setValue((Integer) cal.get(Calendar.MINUTE));
            cal.add(Calendar.DATE, -5);
            txtDataFim.setMinSelectableDate(cal.getTime());
            txtDataFim.setMaxSelectableDate(new Date());
        }
    }

    private void carregarDadosDataHoraPedido(Timestamp Data_hora) {
        Date currentDate = new Date();
        Calendar cal = Calendar.getInstance();
        Date date = DataHora.getTimestampDate(Data_hora);
        cal.setTime(date);

        if (editar) {
            txtDataInicio.setDate(date);
            txtDataInicio.setMinSelectableDate(date);
            txtHoraInicio.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
            txtMinutoInicio.setValue((Integer) cal.get(Calendar.MINUTE));
            txtDataFim.setMinSelectableDate(cal.getTime());
            cal.setTime(currentDate);
            txtDataInicio.setMaxSelectableDate(currentDate);
            txtDataFim.setDate(currentDate);
            txtHoraFim.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
            txtMinutoFim.setValue((Integer) cal.get(Calendar.MINUTE));
            txtDataFim.setMaxSelectableDate(currentDate);
        } else {
            cal.setTime(currentDate);
            txtDataInicio.setDate(currentDate);
            txtDataInicio.setMinSelectableDate(cal.getTime());
            txtDataInicio.setMaxSelectableDate(currentDate);
            txtHoraInicio.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
            txtMinutoInicio.setValue((Integer) cal.get(Calendar.MINUTE));
            txtDataFim.setDate(currentDate);
            txtHoraFim.setValue((Integer) cal.get(Calendar.HOUR_OF_DAY));
            txtMinutoFim.setValue((Integer) cal.get(Calendar.MINUTE));
            txtDataFim.setMinSelectableDate(currentDate);
            txtDataFim.setMaxSelectableDate(currentDate);
        }
        txtDataFim.setEnabled(false);
        txtHoraFim.setEnabled(false);
        txtMinutoFim.setEnabled(false);
    }

    private void carregarPedido(int id) {
        AtividadePreparo atvprep = new AtividadePreparo();
        AtividadePreparoDAO atvprepDAO = new AtividadePreparoDAO();
        Analise anls = new Analise();
        atvprep.setAtividade_preparo_id(id);
        atvprepDAO.selectAtividade(atvprep);

        carregarDadosDataHoraPedido(atvprep.getData_hora_registro());

        if (editar) {
            cmbMetodo.setEnabled(true);
            txtDataInicio.setEnabled(false);
            txtHoraInicio.setEnabled(false);
            txtMinutoInicio.setEnabled(false);
            txtDataFim.setEnabled(false);
            txtHoraFim.setEnabled(false);
            txtMinutoFim.setEnabled(false);
            ckbFinalizar.setVisible(false);
            ckbRetrabalho.setEnabled(true);
            btnProcurarMetodo.setVisible(true);
            txtQuantidade.setEnabled(true);
            txtDescricao.setEnabled(true);

        } else {
            txtDataInicio.setEnabled(true);
            txtHoraInicio.setEnabled(true);
            txtMinutoInicio.setEnabled(true);
            cmbMetodo.setEnabled(false);
            ckbRetrabalho.setEnabled(false);
            btnProcurarMetodo.setVisible(false);
            txtQuantidade.setEnabled(false);
            txtDescricao.setEnabled(false);
            txtUsuarioFim.setEnabled(false);
            btnUsuarioFim.setEnabled(false);
        }

        String[] cod_equip = {atvprep.getCromatografo().getSystem_name()};
        cmbEquipamento.setSelectedItem(cod_equip[0]);
        ckbRetrabalho.setSelected((Boolean) atvprep.getRetrabalho_preparo());
        txtObs.setText(atvprep.getObs_preparo());
        txtLote.setText(atvprep.getLote_preparo());
        String[] cod_mtd = {atvprep.getMetodologia().getCod_metodo()};
        cmbMetodo.setSelectedItem(cod_mtd[0]);
        txtDescricao.setText(atvprep.getDescricao_preparo());
        txtQuantidade.setValue(atvprep.getQtd_preparo());
    }

    private void updatePedido() {
        try {
            AtividadePreparo atvprep = new AtividadePreparo();
            AtividadePreparoDAO atvprepDAO = new AtividadePreparoDAO();
            Usuario user_regeistro = new Usuario();
            Usuario user_inicio = new Usuario();
            Usuario user_fim = new Usuario();
            Cromatografo equip = new Cromatografo();
            Metodologia mtd = new Metodologia();
            atvprep.setAtividade_preparo_id(analise_id);
            if (cmbEquipamento.getSelectedItem() != null) {
                equip.setCromatografo_id(ComboBox.getKeyForValue(cmbEquipamento.getSelectedItem().toString(), categoryMapEquipamento));
            } else {
                equip.setCromatografo_id(0);
            }
            atvprep.setCromatografo(equip);
            atvprep.setRetrabalho_preparo(ckbRetrabalho.isSelected());
            atvprep.setLote_preparo(txtLote.getText());
            atvprep.setObs_preparo(txtObs.getText());
            atvprep.setTipo_preparo(null);
            atvprep.setDescricao_preparo(txtDescricao.getText().trim().toUpperCase());
            atvprep.setQtd_preparo((Double) txtQuantidade.getValue());
            if (!cmbMetodo.getSelectedItem().toString().isEmpty()) {
                mtd.setMetodo_id(ComboBox.getKeyForValue(cmbMetodo.getSelectedItem().toString(), categoryMapMetodo));
            } else {
                mtd.setMetodo_id(0);
            }
            atvprep.setMetodologia(mtd);
            Timestamp datahora_inicio = DataHora.getTimestampDateTime(DataHora.getStringDate(txtDataInicio.getDate())
                    + " " + txtHoraInicio.getValue().toString()
                    + ":" + txtMinutoInicio.getValue().toString() + ":00");
            Timestamp datahora_fim = DataHora.getTimestampDateTime(DataHora.getStringDate(txtDataFim.getDate())
                    + " " + txtHoraFim.getValue().toString()
                    + ":" + txtMinutoFim.getValue().toString() + ":00");
            if (editar) {
                atvprep.setData_hora_inicio(null);
                atvprep.setUser_inicio(new Usuario());
                atvprep.setData_hora_fim(null);
                atvprep.setUser_fim(new Usuario());
            } else {
                atvprep.setData_hora_inicio(datahora_inicio);
                user_inicio.setUser(txtUsuarioInicio.getText());
                atvprep.setUser_inicio(user_inicio);
                if (ckbFinalizar.isSelected()) {
                    atvprep.setData_hora_fim(datahora_fim);
                    user_fim.setUser(txtUsuarioFim.getText());
                    atvprep.setUser_fim(user_fim);
                } else {
                    atvprep.setData_hora_fim(null);
                    atvprep.setUser_fim(new Usuario());
                }
            }
            atvprep.setData_hora_registro(DataHora.getTimestampDate(new Date()));
            user_regeistro.setUser(System.getProperty("user"));
            atvprep.setUser_registro(user_regeistro);
            atvprepDAO.updateAtividade(atvprep);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar dados: " + e);
        }
    }

}
