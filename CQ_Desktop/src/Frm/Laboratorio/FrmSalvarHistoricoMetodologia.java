/*
 * Copyright (C) 2017 rafael.lopes
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package Frm.Laboratorio;

import Classes.Acesso.HistoricoMetodologiaAcesso;
import Classes.DAO.AjusteDAO;
import Classes.DAO.AnaliseDAO;
import Classes.DAO.ColunaDAO;
import Classes.DAO.CromatografoDAO;
import Classes.DAO.HistoricoMetodologiaDAO;
import Classes.DAO.MetodologiaDAO;
import Frm.Login.FrmSalvar;
import Classes.Modelo.Ajuste;
import Classes.Modelo.Analise;
import Classes.Modelo.Cromatografo;
import Classes.Modelo.Metodologia;
import Classes.Modelo.Coluna;
import Classes.Modelo.HistoricoMetodologia;
import Classes.Modelo.Usuario;
import Classes.Util.DataHora;
import java.awt.Cursor;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author rafael.lopes
 */
public class FrmSalvarHistoricoMetodologia extends javax.swing.JDialog {

    private Integer metodo_id;
    private Integer historico_metodo_id;
    private Boolean editar;
    final String zeros = "0000";

    /**
     * Creates new form FrmNovoRegistroCromatografo
     *
     * @param parent
     * @param modal
     */
    public FrmSalvarHistoricoMetodologia(java.awt.Frame parent, boolean modal, Integer mtd_id) {
        super(parent, modal);
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        setTitle("Atividade Equipamento");
        metodo_id = mtd_id;
        editar = false;
        carregarDados();
        readEquipamento();
        readAnalise();
        readTipoAjuste();
        readColunas();
        btnSalvar.setEnabled(true);
        txtCondicaoInicial.setLineWrap(true);
        txtAjuste.setLineWrap(true);
        txtObs.setLineWrap(true);
    }

    public FrmSalvarHistoricoMetodologia(java.awt.Frame parent, boolean modal,
            Integer mtd_id, Integer hist_mtd_id) {
        super(parent, modal);
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        setTitle("Atividade Equipamento");
        metodo_id = mtd_id;
        historico_metodo_id = hist_mtd_id;
        editar = true;
        readEquipamento();
        readAnalise();
        readTipoAjuste();
        readColunas();
        carregarDados();
        HistoricoMetodologiaAcesso Acesso = new HistoricoMetodologiaAcesso();
        if (Acesso.verificarEditarDados()) {
            btnSalvar.setEnabled(true);
            cmbTipoAjuste.setEnabled(true);
            cmbEquipamento.setEnabled(true);
            cmbAnalise.setEnabled(true);
            cmbColuna.setEnabled(true);
            btnProcurarColuna.setEnabled(true);
            txtFaseMovel.setEnabled(true);
            txtCondicaoInicial.setEditable(true);
            txtAjuste.setEditable(true);
            txtObs.setEditable(true);
            ckbPadronizar.setEnabled(true);
        } else {
            btnSalvar.setEnabled(false);
            cmbTipoAjuste.setEnabled(false);
            cmbEquipamento.setEnabled(false);
            cmbAnalise.setEnabled(false);
            cmbColuna.setEnabled(false);
            btnProcurarColuna.setEnabled(false);
            txtFaseMovel.setEnabled(false);
            txtCondicaoInicial.setEditable(false);
            txtAjuste.setEditable(false);
            txtObs.setEditable(false);
            ckbPadronizar.setEnabled(false);
        }
        btnSalvar.setEnabled(true);
        txtCondicaoInicial.setLineWrap(true);
        txtAjuste.setLineWrap(true);
        txtObs.setLineWrap(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDados = new javax.swing.JPanel();
        btnSalvar = new javax.swing.JButton();
        btnFechar = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        cmbEquipamento = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        cmbAnalise = new javax.swing.JComboBox();
        txtMetodo = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtFaseMovel = new javax.swing.JTextField();
        cmbColuna = new javax.swing.JComboBox();
        btnProcurarColuna = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        cmbTipoAjuste = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCondicaoInicial = new javax.swing.JTextArea();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAjuste = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObs = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        ckbPadronizar = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        pnlDados.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnFechar.setText("Fechar");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados"));

        jLabel25.setText("Método:");

        jLabel26.setText("Equipamento:");

        jLabel8.setText("Análise:");

        txtMetodo.setEditable(false);

        jLabel12.setText("Coluna:");

        jLabel13.setText("Fase Móvel:");

        btnProcurarColuna.setText("Buscar");
        btnProcurarColuna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcurarColunaActionPerformed(evt);
            }
        });

        jLabel16.setText("Tipo Ajuste:");

        cmbTipoAjuste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoAjusteActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        txtCondicaoInicial.setColumns(20);
        txtCondicaoInicial.setRows(5);
        txtCondicaoInicial.setVerifyInputWhenFocusTarget(false);
        jScrollPane2.setViewportView(txtCondicaoInicial);

        jLabel14.setText("Condição Inicial:");

        jLabel15.setText("Ajuste:");

        txtAjuste.setColumns(20);
        txtAjuste.setRows(5);
        jScrollPane3.setViewportView(txtAjuste);

        txtObs.setColumns(20);
        txtObs.setRows(5);
        jScrollPane1.setViewportView(txtObs);

        jLabel10.setText("Observação:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbAnalise, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbEquipamento, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtMetodo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFaseMovel)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(cmbColuna, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnProcurarColuna))
                            .addComponent(cmbTipoAjuste, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(txtMetodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(cmbTipoAjuste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbAnalise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(cmbEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(cmbColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcurarColuna))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtFaseMovel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ckbPadronizar.setText("Padronizar");

        javax.swing.GroupLayout pnlDadosLayout = new javax.swing.GroupLayout(pnlDados);
        pnlDados.setLayout(pnlDadosLayout);
        pnlDadosLayout.setHorizontalGroup(
            pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDadosLayout.createSequentialGroup()
                        .addComponent(ckbPadronizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlDadosLayout.setVerticalGroup(
            pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFechar)
                    .addComponent(btnSalvar)
                    .addComponent(ckbPadronizar))
                .addContainerGap())
        );

        getContentPane().add(pnlDados);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        dispose();
    }//GEN-LAST:event_btnFecharActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            if (cmbTipoAjuste.getSelectedItem().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Selecione o Tipo de Ajuste!");
                cmbTipoAjuste.requestFocus();
            } else if (!"Sem Ajustes".equals(cmbTipoAjuste.getSelectedItem().toString())) {
                if (cmbAnalise.getSelectedItem().toString().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Selecione a Análise!");
                    cmbAnalise.requestFocus();
                } else if (txtCondicaoInicial.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Descreva a condição inicial do problema!");
                    txtCondicaoInicial.requestFocus();
                } else if (txtAjuste.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Descreva o ajuste realizado!");
                    txtAjuste.requestFocus();
                } else {//Abre Dialog para savar
                    FrmSalvar frmSalvar = new FrmSalvar(null, true);
                    frmSalvar.setVisible(true);
                    if (FrmSalvar.senha()) {
                        if (editar) {
                            updateDados();
                            dispose();
                        } else {
                            criarDados();
                            dispose();
                        }
                    }
                }
            } else {
                //Abre Dialog para savar
                FrmSalvar frmSalvar = new FrmSalvar(null, true);
                frmSalvar.setVisible(true);
                if (FrmSalvar.senha()) {
                    if (editar) {
                        updateDados();
                        dispose();
                    } else {
                        criarDados();
                        dispose();
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Não foi possivel salvar. Algum Campo está inválido!");
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnProcurarColunaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcurarColunaActionPerformed
        Coluna col = new Coluna();
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        FrmProcurarColuna frm = new FrmProcurarColuna(null, true, col);
        frm.setVisible(true);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        String[] cod_mtd = {"CQ-"
            + col.getTipo_coluna()
            + "-" + zeros.substring(String.valueOf(col.getCodigo_coluna()).length())
            + String.valueOf(col.getCodigo_coluna())};
        cmbColuna.setSelectedItem(cod_mtd[0]);
    }//GEN-LAST:event_btnProcurarColunaActionPerformed

    private void cmbTipoAjusteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoAjusteActionPerformed
//        if ("Sem Ajustes".equals(cmbTipoAjuste.getSelectedItem())) {
//            bloquearCampos();
//        } else {
//            liberarCampos();
//        }
    }//GEN-LAST:event_cmbTipoAjusteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmSalvarHistoricoMetodologia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmSalvarHistoricoMetodologia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmSalvarHistoricoMetodologia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmSalvarHistoricoMetodologia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>


        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmSalvarHistoricoMetodologia dialog = new FrmSalvarHistoricoMetodologia(new javax.swing.JFrame(), true, null, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnFechar;
    private javax.swing.JButton btnProcurarColuna;
    public static javax.swing.JButton btnSalvar;
    private javax.swing.JCheckBox ckbPadronizar;
    private javax.swing.JComboBox cmbAnalise;
    private javax.swing.JComboBox cmbColuna;
    private javax.swing.JComboBox cmbEquipamento;
    private javax.swing.JComboBox cmbTipoAjuste;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel pnlDados;
    private javax.swing.JTextArea txtAjuste;
    private javax.swing.JTextArea txtCondicaoInicial;
    private javax.swing.JTextField txtFaseMovel;
    private javax.swing.JTextField txtMetodo;
    private javax.swing.JTextArea txtObs;
    // End of variables declaration//GEN-END:variables

    private void updateDados() {
        try {
            HistoricoMetodologia histmtd = new HistoricoMetodologia();
            HistoricoMetodologiaDAO histmtdDAO = new HistoricoMetodologiaDAO();
            Usuario user_registro = new Usuario();
            Cromatografo equip = new Cromatografo();
            Analise anls = new Analise();
            histmtd.setHistorico_metodologia_id(historico_metodo_id);
            histmtd.setTipo_ajuste(cmbTipoAjuste.getSelectedItem().toString());
            equip.setSystem_name(cmbEquipamento.getSelectedItem().toString());
            anls.setAnalise(cmbAnalise.getSelectedItem().toString());
            histmtd.setColuna(cmbColuna.getSelectedItem().toString());
            histmtd.setFase_movel(txtFaseMovel.getText());
            histmtd.setCodicao_inicial(txtCondicaoInicial.getText());
            histmtd.setAjuste(txtAjuste.getText());
            histmtd.setObs(txtObs.getText());
            histmtd.setPadronizar(ckbPadronizar.isSelected());
            user_registro.setUser(System.getProperty("user"));
            histmtd.setData_registro(DataHora.getTimestampDate(new Date()));
            histmtd.setCromatografo(equip);
            histmtd.setAnalise(anls);
            histmtd.setUser_registro(user_registro);
            histmtdDAO.updateHistoricoMetodologia(histmtd);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar dados: " + e);
        }
    }

    private void criarDados() {
        try {
            HistoricoMetodologia histmtd = new HistoricoMetodologia();
            HistoricoMetodologiaDAO histmtdDAO = new HistoricoMetodologiaDAO();
            Usuario user_registro = new Usuario();
            Metodologia mtd = new Metodologia();
            Cromatografo equip = new Cromatografo();
            Analise anls = new Analise();
            mtd.setMetodo_id(metodo_id);
            histmtd.setTipo_ajuste(cmbTipoAjuste.getSelectedItem().toString());
            equip.setSystem_name(cmbEquipamento.getSelectedItem().toString());
            anls.setAnalise(cmbAnalise.getSelectedItem().toString());
            histmtd.setColuna(cmbColuna.getSelectedItem().toString());
            histmtd.setFase_movel(txtFaseMovel.getText());
            histmtd.setCodicao_inicial(txtCondicaoInicial.getText());
            histmtd.setAjuste(txtAjuste.getText());
            histmtd.setObs(txtObs.getText());
            histmtd.setPadronizar(ckbPadronizar.isSelected());
            user_registro.setUser(System.getProperty("user"));
            histmtd.setData_registro(DataHora.getTimestampDate(new Date()));
            histmtd.setMetodologia(mtd);
            histmtd.setCromatografo(equip);
            histmtd.setAnalise(anls);
            histmtd.setUser_registro(user_registro);
            histmtdDAO.createHistoricoMetodologia(histmtd);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar dados: " + e);
        }
    }

    private void carregarDados() {
        Metodologia mtd = new Metodologia();
        MetodologiaDAO mtdDAO = new MetodologiaDAO();
        mtd.setMetodo_id(metodo_id);
        mtdDAO.selectMetodologia(mtd);
        txtMetodo.setText(mtd.getCod_metodo());
        if (editar) {
            HistoricoMetodologiaDAO histmtdDao = new HistoricoMetodologiaDAO();
            HistoricoMetodologia histmtd = new HistoricoMetodologia();
            histmtd.setHistorico_metodologia_id(historico_metodo_id);
            histmtdDao.selectHistoricoMetodologia(histmtd);
            String[] tipo_ajuste = {histmtd.getTipo_ajuste()};
            cmbTipoAjuste.setSelectedItem(tipo_ajuste[0]);
            String[] equip = {histmtd.getCromatografo().getSystem_name()};
            cmbEquipamento.setSelectedItem(equip[0]);
            String[] anls = {histmtd.getAnalise().getAnalise()};
            cmbAnalise.setSelectedItem(anls[0]);
            String[] coluna = {histmtd.getColuna()};
            ckbPadronizar.setSelected(histmtd.getPadronizar());
            cmbColuna.setSelectedItem(coluna[0]);
            txtFaseMovel.setText(histmtd.getFase_movel());
            txtCondicaoInicial.setText(histmtd.getCodicao_inicial());
            txtAjuste.setText(histmtd.getAjuste());
            txtObs.setText(histmtd.getObs());
        }
    }

    public final void readEquipamento() {
        cmbEquipamento.removeAllItems();
        cmbEquipamento.addItem("");
        CromatografoDAO equipDao = new CromatografoDAO();
        for (Cromatografo equip : equipDao.readCromatografo()) {
            cmbEquipamento.addItem(equip.getSystem_name());
        }
    }

    public final void readAnalise() {
        cmbAnalise.removeAllItems();
        cmbAnalise.addItem("");
        AnaliseDAO anlsDao = new AnaliseDAO();
        for (Analise anls : anlsDao.readAnalise()) {
            cmbAnalise.addItem(anls.getAnalise());
        }
    }

    public final void readTipoAjuste() {
        cmbTipoAjuste.removeAllItems();
        cmbTipoAjuste.addItem("");
        AjusteDAO ajstDao = new AjusteDAO();
        for (Ajuste ajst : ajstDao.readAjuste()) {
            cmbTipoAjuste.addItem(ajst.getTipo_ajuste());
        }
    }

    public final void readColunas() {
        cmbColuna.removeAllItems();
        cmbColuna.addItem("");
        ColunaDAO colDao = new ColunaDAO();
        for (Coluna col : colDao.readAllColuna()) {
            cmbColuna.addItem("CQ-"
                    + col.getTipo_coluna()
                    + "-" + zeros.substring(String.valueOf(col.getCodigo_coluna()).length())
                    + String.valueOf(col.getCodigo_coluna()));
        }
    }

    private void bloquearCampos() {
        cmbEquipamento.setEnabled(false);
        cmbAnalise.setEnabled(false);
        cmbColuna.setEnabled(false);
        txtFaseMovel.setEnabled(false);
        txtCondicaoInicial.setEnabled(false);
        txtAjuste.setEnabled(false);
        txtObs.setEnabled(false);
        cmbEquipamento.setSelectedItem("");
        cmbAnalise.setSelectedItem("");
        cmbColuna.setSelectedItem("");
        btnProcurarColuna.setEnabled(false);
        txtFaseMovel.setText(null);
        txtCondicaoInicial.setText(null);
        txtAjuste.setText(null);
        txtObs.setText(null);
    }

    private void liberarCampos() {
        cmbEquipamento.setEnabled(true);
        cmbAnalise.setEnabled(true);
        cmbColuna.setEnabled(true);
        txtFaseMovel.setEnabled(true);
        txtCondicaoInicial.setEnabled(true);
        txtAjuste.setEnabled(true);
        txtObs.setEnabled(true);
        cmbEquipamento.setSelectedItem("");
        cmbAnalise.setSelectedItem("");
        cmbColuna.setSelectedItem("");
        btnProcurarColuna.setEnabled(true);
        txtFaseMovel.setText(null);
        txtCondicaoInicial.setText(null);
        txtAjuste.setText(null);
        txtObs.setText(null);
    }

}
